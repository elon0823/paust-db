// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package blockchain

import (
	"encoding/json"
	"errors"
	fmt "fmt"
	"log"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Blockchain struct {
	Chain                []*Block `protobuf:"bytes,1,rep,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blockchain) Reset()         { *m = Blockchain{} }
func (m *Blockchain) String() string { return proto.CompactTextString(m) }
func (*Blockchain) ProtoMessage()    {}
func (*Blockchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ac6287ce250c9a, []int{0}
}

func (m *Blockchain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blockchain.Unmarshal(m, b)
}
func (m *Blockchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blockchain.Marshal(b, m, deterministic)
}
func (m *Blockchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blockchain.Merge(m, src)
}
func (m *Blockchain) XXX_Size() int {
	return xxx_messageInfo_Blockchain.Size(m)
}
func (m *Blockchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Blockchain.DiscardUnknown(m)
}

var xxx_messageInfo_Blockchain proto.InternalMessageInfo

func (m *Blockchain) GetChain() []*Block {
	if m != nil {
		return m.Chain
	}
	return nil
}
func (blockchain *Blockchain) Length() int {
	return len(blockchain.Chain)
}

func (blockchain *Blockchain) LastBlock() Block {

	return *blockchain.Chain[blockchain.Length()-1]
}

func (blockchain *Blockchain) AddBlock(bpm int32) error {
	prevBlock := blockchain.LastBlock()
	block := NewBlock(prevBlock.Index+1, bpm, prevBlock.Hash)

	if blockchain.isValidBlock(*block, prevBlock) {
		blockchain.Chain = append(blockchain.Chain, block)

		blockchain.PrintChain()
		return nil
	} else {
		return errors.New("Not valid block")
	}
}

func (blockchain *Blockchain) ReplaceChain(newChain *Blockchain) {

	if newChain.Length() > blockchain.Length() {
		blockchain.Chain = newChain.Chain
		blockchain.PrintChain()
	}
}

func (blockchain *Blockchain) PrintChain() {
	bytes, err := json.MarshalIndent(blockchain, "", "  ")
	if err != nil {

		log.Fatal(err)
	}
	// Green console color: 	\x1b[32m
	// Reset console color: 	\x1b[0m
	fmt.Printf("Chain is changed!")
	fmt.Printf("\x1b[32m%s\x1b[0m> ", string(bytes))
}

func (blockchain *Blockchain) isValidBlock(newBlock, oldBlock Block) bool {

	if oldBlock.Index+1 != newBlock.Index {
		return false
	}

	if oldBlock.Hash != newBlock.PrevHash {
		return false
	}

	if newBlock.CalculateHash() != newBlock.Hash {
		return false
	}

	return true
}

func (blockchain *Blockchain) saveBlock(block *Block) error {
	return nil
}

func (blockchain *Blockchain) loadBlock(index int32) error {
	return nil
}

func NewBlockchain(storePath string, savedb bool) (*Blockchain, error) {
	genesisBlock := Genesis()
	newChain := []*Block{genesisBlock}

	if savedb {
		InitBlockStore(storePath)
	}

	return &Blockchain{
		Chain: newChain,
	}, nil
}

func init() {
	proto.RegisterType((*Blockchain)(nil), "blockchain.Blockchain")
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor_e9ac6287ce250c9a) }

var fileDescriptor_e9ac6287ce250c9a = []byte{
	// 85 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xca, 0xc9, 0x4f,
	0xce, 0x4e, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0x71, 0x83, 0xd9, 0x10, 0x09, 0x25, 0x53, 0x2e, 0x2e, 0x27, 0xb8, 0x94, 0x90, 0x3a, 0x17,
	0x2b, 0x98, 0x21, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0x24, 0xa8, 0x87, 0x64, 0x10, 0x58, 0x59,
	0x10, 0x44, 0x3e, 0x89, 0x0d, 0xac, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xff, 0xff,
	0xd9, 0x6a, 0x00, 0x00, 0x00,
}
